{"version":3,"sources":["history.js","defs.js","Utils.js","TodoFooter.js","TodoItem.js","GraphQLData.js","TodoApp.js","NavBar.js","App.js","index.js"],"names":["createBrowserHistory","count","word","TodoFooter","this","props","completedCount","nowShowing","onClearCompleted","clearButton","className","onClick","Utils","href","classNames","selected","defs","React","Component","TodoItem","useState","todo","title","editText","setEditText","editField","useRef","useEffect","current","editing","node","focus","setSelectionRange","value","length","onDestroy","onToggle","completed","type","checked","onChange","onDoubleClick","onEdit","ref","event","target","onKeyDown","onCancel","which","onSave","val","trim","handleSubmit","GET_TODOS","gql","ADD_TODO","TOGGLE_TODO","TOGGLE_ALL_TODO","DELETE_TODO","UPDATE_TODO","CLEAR_COMPLETED_TODO","TodoApp","setNowShowing","getEditing","setEditing","newTodo","setNewTodo","shownTodos","setShownTodos","useMutation","addTodo","toggleTodo","toggleAllTodo","deleteTodo","updateTodo","clearCompletedTodo","useQuery","loading","error","data","setNowShowingFn","routes","processLocationHash","hash","substring","history","location","listen","action","console","message","queryTask","add","variables","task","user","username","refetchQueries","query","cancel","todoItems","filter","map","todoToToggle","taskID","id","destroy","edit","text","todoToSave","save","activeTodoCount","reduce","accum","footer","main","htmlFor","placeholder","keyCode","preventDefault","autoFocus","NavBar","to","client","ApolloClient","uri","cache","InMemoryCache","App","style","color","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f21cc90.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","export default {\n    ALL_TODOS: 'all',\n    ACTIVE_TODOS: 'active',\n    COMPLETED_TODOS: 'completed',\n}\n","export default {\n    pluralize: (count, word) => {\n        return count === 1 ? word : word + 's';\n    }\n}\n","import React from 'react'\nimport classNames from 'classnames'\n\nimport defs from './defs'\nimport Utils from './Utils'\n\nexport default class TodoFooter extends React.Component {\n  render() {\n    const { completedCount, count, nowShowing, onClearCompleted } = this.props\n    const clearButton = completedCount === 0\n      ? null\n      : (\n        <button\n          className=\"clear-completed\"\n          onClick={onClearCompleted}>\n          Clear completed\n        </button>\n      )\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{count}</strong> {Utils.pluralize(count, 'item')} left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({selected: nowShowing === defs.ALL_TODOS})}>\n                All\n            </a>\n          </li>\n          {' '}\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({selected: nowShowing === defs.ACTIVE_TODOS})}>\n                Active\n            </a>\n          </li>\n          {' '}\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({selected: nowShowing === defs.COMPLETED_TODOS})}>\n                Completed\n            </a>\n          </li>\n        </ul>\n        {clearButton}\n      </footer>\n    )\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport classNames from 'classnames'\n\nconst ESCAPE_KEY = 27\nconst ENTER_KEY = 13\n\nconst TodoItem = (props) => {\n  const [editText, setEditText] = useState(props.todo.title);\n  const editField = React.useRef(null)\n\n  useEffect(() => {\n    if (!editField.current && props.editing) {\n      const node = editField.current\n      node.focus()\n      node.setSelectionRange(node.value.length, node.value.length)\n    }\n  })\n\n  const handleSubmit = event => {\n    const {onDestroy, onSave } = props\n    var val = editText.trim()\n    if (val) {\n      onSave(val)\n      setEditText(val)\n    } else {\n      onDestroy()\n    }\n  }\n\n  const handleEdit = () => {\n    const { onEdit, todo } = props\n    onEdit()\n    setEditText(todo.title)\n  }\n\n  const handleKeyDown = event => {\n    const { onCancel, todo } = props\n    if (event.which === ESCAPE_KEY) {\n      setEditText(todo.title)\n      onCancel(event)\n    } else if (event.which === ENTER_KEY) {\n      handleSubmit(event)\n    }\n  }\n\n  const handleChange = event => {\n    if (props.editing) {\n      setEditText(event.target.value)\n    }\n  }\n\n  const { editing, onDestroy, onToggle, todo } = props\n  return (\n    <li className={classNames({\n      completed: todo.completed,\n      editing: editing,\n    })}>\n      <div className=\"view\">\n        <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={onToggle}\n        />\n        <label onDoubleClick={handleEdit}>\n            {todo.title}\n        </label>\n        <button className=\"destroy\" onClick={onDestroy} />\n      </div>\n      <input\n        ref={editField}\n        className=\"edit\"\n        value={editText}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n    </li>\n  )\n}\n\nexport default TodoItem\n","import gql from \"graphql-tag\";\n\nexport const GET_TODOS = gql`\n  query {\n    queryTask {\n      id\n      title\n      completed\n    }\n  }\n`;\n\nexport const ADD_TODO = gql`\n  mutation addTask($task: [AddTaskInput!]!) {\n    addTask(input: $task) {\n      task {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const TOGGLE_TODO = gql`\n  mutation updateTask($taskID: ID!, $completed: Boolean!) {\n    updateTask(input: {\n      filter: { id: [$taskID] },\n      set: {\n        completed: $completed\n      }\n    }) {\n      task {\n        id\n        title\n        completed\n      }\n    }\n  }\n`;\n\nexport const TOGGLE_ALL_TODO = gql`\n  mutation updateTask($completed: Boolean!) {\n    updateTask(input: {\n      filter: {},\n      set: {\n        completed: $completed\n      }\n    }) {\n      task {\n        id\n        title\n        completed\n      }\n    }\n  }\n`;\n\nexport const DELETE_TODO = gql`\n  mutation deleteTask($taskID: [ID!]) {\n    deleteTask(filter: { id: $taskID }) {\n      msg\n    }\n  }\n`;\n\nexport const UPDATE_TODO = gql`\n  mutation updateTask($taskID: ID!, $task: TaskPatch!) {\n    updateTask(input: {\n      filter: { id: [$taskID] },\n      set: $task\n    }) {\n      task {\n        id\n        title\n        completed\n      }\n    }\n  }\n`;\n\nexport const CLEAR_COMPLETED_TODO = gql`\n  mutation deleteTask($completed: Boolean) {\n    deleteTask(filter: { completed: $completed }) {\n      msg\n    }\n  }\n`;","import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\n\nimport defs from './defs'\nimport TodoFooter from './TodoFooter'\nimport TodoItem from './TodoItem'\nimport history from './history'\nimport { GET_TODOS, ADD_TODO, DELETE_TODO, TOGGLE_TODO, UPDATE_TODO, \n  CLEAR_COMPLETED_TODO, TOGGLE_ALL_TODO } from \"./GraphQLData\";\nconst ENTER_KEY = 13\n\n\nconst TodoApp = () => {\n  const [nowShowing, setNowShowing] = useState(defs.ALL_TODOS);\n  const [getEditing, setEditing] = useState(null);\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [shownTodos, setShownTodos] = useState([]);\n\n  const [addTodo] = useMutation(ADD_TODO);\n  const [toggleTodo] = useMutation(TOGGLE_TODO);\n  const [toggleAllTodo] = useMutation(TOGGLE_ALL_TODO);\n  const [deleteTodo] = useMutation(DELETE_TODO);\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [clearCompletedTodo] = useMutation(CLEAR_COMPLETED_TODO);\n\n  const { loading, error, data } = useQuery(GET_TODOS);\n  const getData = () => {\n    if (loading) {\n      return null;\n    }\n    if (error) {\n      console.error(`GET_TODOS error: ${error}`);\n      return `Error: ${error.message}`;\n    }\n    if (data.queryTask) {\n      setShownTodos(data.queryTask)\n    }\n  }\n\n  useEffect(() => {\n    const setNowShowingFn = nowShowing => () => setNowShowing(nowShowing)\n    const routes = {\n      '/': setNowShowingFn(defs.ALL_TODOS),\n      '/active': setNowShowingFn(defs.ACTIVE_TODOS),\n      '/completed': setNowShowingFn(defs.COMPLETED_TODOS),\n    }\n    const processLocationHash = hash => {\n      if (hash) {\n        hash = hash.substring(1)\n      }\n      const route = routes[hash] || routes['/']\n      route()\n    }\n    processLocationHash(history.location.hash)\n    history.listen((location, action) =>\n      processLocationHash(location.hash)\n    )\n    getData()\n  }, [data]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  \n  const handleChange = event => {\n    setNewTodo(event.target.value)\n  }\n\n  const handleNewTodoKeyDown = event => {\n    if (event.keyCode !== ENTER_KEY) {\n      return\n    }\n    event.preventDefault()\n    const val = newTodo\n    if (val) {\n      add(val)\n      setNewTodo('')\n    }\n  }\n\n\n  const add = (title) =>\n  addTodo({\n    variables: { task: [\n      { title: title, completed: false, user: { username: \"someone@emal.com\" } }\n    ]},\n    refetchQueries: [{\n      query: GET_TODOS\n    }]\n  });\n  \n\n  const destroy = todo =>\n    deleteTodo({\n      variables: {\n        taskID: [todo.id]\n      },\n      refetchQueries: [{\n        query: GET_TODOS\n      }]\n    })\n\n    const toggleAll = event => {\n      const checked = event.target.checked\n      toggleAllTodo({\n        variables: {\n          completed: checked\n        },\n        refetchQueries: [{\n          query: GET_TODOS\n        }]\n      })\n    }\n\n    const toggle = todoToToggle => {\n      toggleTodo({\n        variables: {\n          taskID: todoToToggle.id,\n          completed: !todoToToggle.completed\n        },\n        refetchQueries: [{\n          query: GET_TODOS\n        }]\n      })\n    }\n\n    const edit = todo => setEditing(todo.id)\n\n    const save = (todoToSave, text) => {\n      updateTodo({\n        variables: {\n          taskID: todoToSave.id,\n          task: {\n            title: text\n          }\n        },\n        refetchQueries: [{\n          query: GET_TODOS\n        }]\n      })\n      setEditing(null)\n    }\n\n    const cancel = () =>\n    setEditing(null)\n\n  const clearCompleted = () =>\n    clearCompletedTodo({\n      variables: {\n        completed: true\n      },\n      refetchQueries: [{\n        query: GET_TODOS\n      }]\n    })\n\n    const newTodos = shownTodos.filter(todo => {\n      switch (nowShowing) {\n        case defs.ACTIVE_TODOS:\n          return !todo.completed\n        case defs.COMPLETED_TODOS:\n          return todo.completed\n        default:\n          return true\n      }\n    })\n\n    const todoItems = newTodos.map(todo => {\n      return (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggle={() => toggle(todo)}\n          onDestroy={() => destroy(todo)}\n          onEdit={() => edit(todo)}\n          editing={getEditing === todo.id}\n          onSave={text => save(todo, text)}\n          onCancel={cancel}\n        />\n      )\n    })\n\n  const activeTodoCount = shownTodos.reduce(function (accum, todo) {\n    return todo.completed ? accum : accum + 1\n  }, 0)\n\n  const completedCount = shownTodos.length - activeTodoCount\n\n  const footer = (activeTodoCount || completedCount)\n  ? <TodoFooter\n      count={activeTodoCount}\n      completedCount={completedCount}\n      nowShowing={nowShowing}\n      onClearCompleted={clearCompleted}\n    />\n  : null\n\n  const main = !shownTodos.length\n  ? null\n  : (\n    <section className=\"main\">\n      <input\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        type=\"checkbox\"\n        onChange={toggleAll}\n        checked={activeTodoCount === 0}\n      />\n      <label\n        htmlFor=\"toggle-all\"\n      />\n      <ul className=\"todo-list\">\n        {todoItems}\n      </ul>\n    </section>\n  )\n\n  return (\n    <div>\n      <header className=\"header\">\n        <input\n          className=\"new-todo\"\n          placeholder=\"Enter your tasks?\"\n          value={newTodo}\n          onKeyDown={handleNewTodoKeyDown}\n          onChange={handleChange}\n          autoFocus={true}\n        />\n      </header>\n      {main}\n      {footer}\n    </div>\n  )\n}\n\nexport default TodoApp","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport './NavBar.css';\n\nconst NavBar = () => {\n  return (\n    <div className=\"navbar\">\n      <ul>\n        <span>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n        </span>\n      </ul>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React from 'react'\nimport { Route, Router, Switch } from \"react-router-dom\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nimport TodoApp from './TodoApp';\nimport NavBar from './NavBar';\nimport history from \"./history\";\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: 'https://frosty-brook.ap-south-1.aws.cloud.dgraph.io/graphql',\n  cache: new InMemoryCache()\n})\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Router history={history}>\n          <h1 style={{color: \"DarkCyan\"}}>What to do?</h1>\n          <header className=\"navheader\">\n            <NavBar />\n          </header>\n          <Switch>\n            <Route path=\"/\" component={TodoApp} exact />\n          </Switch>\n        </Router>\n    </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'todomvc-app-css/index.css'\n\nimport history from \"./history\";\nimport App from './App';\n\n/* A function that routes the user to the right place after login */\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}